basePath: /
definitions:
  app.Response:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  dtos.AuthInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dtos.LoginReponse:
    properties:
      access_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/ent.User'
    type: object
  dtos.UserInput:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      status:
        type: boolean
    type: object
  ent.User:
    properties:
      created_at:
        description: CreatedAt holds the value of the "created_at" field.
        type: string
      email:
        description: Email holds the value of the "email" field.
        type: string
      firstName:
        description: FirstName holds the value of the "firstName" field.
        type: string
      id:
        description: ID of the ent.
        type: string
      lastName:
        description: LastName holds the value of the "lastName" field.
        type: string
      location:
        description: Location holds the value of the "location" field.
        type: string
      phone:
        description: Phone holds the value of the "phone" field.
        type: string
      status:
        description: Status holds the value of the "status" field.
        type: boolean
      updated_at:
        description: UpdatedAt holds the value of the "updated_at" field.
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a real world sample golang Rest API server
  license:
    name: MIT
    url: https://github.com/yhagio/github.com/yhagio/go_api_boilerplate/blob/master/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Golang Rest API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  $ref: '#/definitions/dtos.LoginReponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      summary: Login user
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Log out an user
      tags:
      - Auth
  /api/v1/auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Get authenticated user
      tags:
      - Auth
  /api/v1/auth/refresh:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.LoginReponse'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh auth token
      tags:
      - Auth
  /api/v1/user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/app.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/ent.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Get all users
      tags:
      - User
    post:
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - User
  /api/v1/user/{id}:
    delete:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove user given id
      tags:
      - User
    get:
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/app.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/app.Response'
      security:
      - ApiKeyAuth: []
      summary: Get user info of given id
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
